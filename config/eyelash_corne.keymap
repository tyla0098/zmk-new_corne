#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <400>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 34 42 43 44 0 1 2 13 14 15>;
            hold-trigger-on-release;
        };

        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <600>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 19 20 21 22 23 24 25 26 35 36 37 38 39 40 46 47 6 7 8 9 10 11 12 20 21 22 23 24 25 26 27 35 36 37 38 39 40 41 45 46 47>;
            hold-trigger-on-release;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        S1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <14 15>;
        };

        s2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <16 17>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <30 31>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <31 32>;
        };

        valuepaste {
            bindings = <&kp LA(LC(V))>;
            key-positions = <30 31 32>;
        };

        screencap {
            bindings = <&kp LG(LS(S))>;
            key-positions = <0 28>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <29 30>;
        };

        three {
            bindings = <&kp NUMBER_3>;
            key-positions = <14 15 16>;
        };

        four {
            bindings = <&kp NUMBER_4>;
            key-positions = <14 16 17 15>;
        };

        five {
            bindings = <&kp N5>;
            key-positions = <3 4>;
        };

        six {
            bindings = <&kp NUMBER_6>;
            key-positions = <25 26>;
        };

        seven {
            bindings = <&kp N7>;
            key-positions = <23 24>;
        };

        eight {
            bindings = <&kp N8>;
            key-positions = <24 25 26>;
        };

        nine {
            bindings = <&kp N9>;
            key-positions = <23 24 25 26>;
        };

        zero {
            bindings = <&kp N0>;
            key-positions = <8 9>;
        };

        rightblanket {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <37 38>;
        };

        leftblanket {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <39 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB    &kp Q            &kp W            &kp E              &kp R         &kp T                              &kp UP               &kp Y  &kp U         &kp I              &kp O            &kp P                    &kp BSPC
&td0       &HML LEFT_GUI A  &HML LEFT_ALT S  &HML LEFT_SHIFT D  &HML LCTRL F  &kp G                    &kp LEFT  &kp DEL   &kp RIGHT  &kp H  &HMR RCTRL J  &HMR LEFT_SHIFT K  &HMR LEFT_ALT L  &HMR LEFT_GUI SEMICOLON  &kp SQT
&kp LCTRL  &kp Z            &kp X            &kp C              &kp V         &kp B  &kp SCROLLLOCK              &kp DOWN             &kp N  &kp M         &kp COMMA          &kp DOT          &kp FSLH                 &kp ESC
                                             &lt 4 LEFT_GUI     &lt 3 ENTER   &mo 1                                                   &mo 2  &lt 3 SPACE   &to 5
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        lower_layer {
            display-name = "NUMBER";
            bindings = <
&trans  &kp N1           &kp N2          &kp N3        &kp N4        &kp N5                                         &mmv MOVE_UP                     &kp N6           &kp N7           &kp N8           &kp N9           &kp N0    &kp BSPC
&trans  &bt BT_CLR_ALL   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                   &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &kp HOME  &kp PG_UP
&trans  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &trans        &trans        &rgb_ug RGB_EFF  &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                                         &trans        &trans        &trans                                                                          &kp INS          &kp DEL          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        raise_layer {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                            &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&trans  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&trans  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5   &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                    &trans     &trans     &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&trans          &trans      &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&trans          &sys_reset  &trans     &bootloader  &trans     &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans       &trans     &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &trans       &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        numpad {
            bindings = <
&trans  &none  &none           &msc SCRL_UP    &none            &none                           &mmv MOVE_UP                     &kp SLASH   &kp N7  &kp N8  &kp N9  &kp MINUS      &trans
&trans  &none  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &none           &mmv MOVE_LEFT  &mkp MB1        &mmv MOVE_RIGHT  &none       &kp N4  &kp N5  &kp N6  &kp LS(EQUAL)  &trans
&trans  &none  &none           &none           &none            &none  &none                    &mmv MOVE_DOWN                   &kp PERIOD  &kp N1  &kp N2  &kp N3  &kp EQUAL      &trans
                               &none           &none            &none                                                            &kp N0      &kp N0  &none
            >;

            sensor-bindings = <&inc_dec_kp 0 0>;
            label = "pad";
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &kp TAB  &kp N7  &kp N8  &kp N9  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans   &kp N4  &kp N5  &kp N6  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans   &kp N1  &kp N2  &kp N3  &kp RET  &to 0
                        &trans  &trans  &trans                                    &trans   &kp N0  &trans
            >;

            label = "ONE HAND MODE";
        };
    };
};
